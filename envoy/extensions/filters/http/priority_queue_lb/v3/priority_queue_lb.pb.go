// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.2
// source: envoy/extensions/filters/http/priority_queue_lb/v3/priority_queue_lb.proto

package priority_queue_lbv3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration parameters for the gradient controller.
type PriorityQueueLBGradientControllerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLatency                    *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=max_latency,json=maxLatency,proto3" json:"max_latency,omitempty"`
	HighLatencyTriggerThreshold   *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=high_latency_trigger_threshold,json=highLatencyTriggerThreshold,proto3" json:"high_latency_trigger_threshold,omitempty"`
	HappinessAlpha                *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=happiness_alpha,json=happinessAlpha,proto3" json:"happiness_alpha,omitempty"`
	HappinessBeta                 *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=happiness_beta,json=happinessBeta,proto3" json:"happiness_beta,omitempty"`
	StepDownPercentage            *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=step_down_percentage,json=stepDownPercentage,proto3" json:"step_down_percentage,omitempty"`
	ExperimentModeDuration        *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=experiment_mode_duration,json=experimentModeDuration,proto3" json:"experiment_mode_duration,omitempty"`
	ExperimentModeRecheckDuration *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=experiment_mode_recheck_duration,json=experimentModeRecheckDuration,proto3" json:"experiment_mode_recheck_duration,omitempty"`
	NormalModeDuration            *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=normal_mode_duration,json=normalModeDuration,proto3" json:"normal_mode_duration,omitempty"`
	ExperimentMinSampleSize       *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=experiment_min_sample_size,json=experimentMinSampleSize,proto3" json:"experiment_min_sample_size,omitempty"`
	ExperimentMaxDuration         *wrapperspb.UInt32Value `protobuf:"bytes,12,opt,name=experiment_max_duration,json=experimentMaxDuration,proto3" json:"experiment_max_duration,omitempty"`
}

func (x *PriorityQueueLBGradientControllerConfig) Reset() {
	*x = PriorityQueueLBGradientControllerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityQueueLBGradientControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityQueueLBGradientControllerConfig) ProtoMessage() {}

func (x *PriorityQueueLBGradientControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityQueueLBGradientControllerConfig.ProtoReflect.Descriptor instead.
func (*PriorityQueueLBGradientControllerConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescGZIP(), []int{0}
}

func (x *PriorityQueueLBGradientControllerConfig) GetMaxLatency() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxLatency
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetHighLatencyTriggerThreshold() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HighLatencyTriggerThreshold
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetHappinessAlpha() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HappinessAlpha
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetHappinessBeta() *wrapperspb.DoubleValue {
	if x != nil {
		return x.HappinessBeta
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetStepDownPercentage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.StepDownPercentage
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetExperimentModeDuration() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExperimentModeDuration
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetExperimentModeRecheckDuration() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExperimentModeRecheckDuration
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetNormalModeDuration() *wrapperspb.UInt32Value {
	if x != nil {
		return x.NormalModeDuration
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetExperimentMinSampleSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExperimentMinSampleSize
	}
	return nil
}

func (x *PriorityQueueLBGradientControllerConfig) GetExperimentMaxDuration() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExperimentMaxDuration
	}
	return nil
}

type PriorityQueueLB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConcurrencyControllerConfig:
	//
	//	*PriorityQueueLB_GradientControllerConfig
	ConcurrencyControllerConfig isPriorityQueueLB_ConcurrencyControllerConfig `protobuf_oneof:"concurrency_controller_config"`
	// If set to false, the priority_queue_lb filter will operate as a pass-through filter. If the
	// message is unspecified, the filter will be enabled.
	Enabled *v3.RuntimeFeatureFlag `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *PriorityQueueLB) Reset() {
	*x = PriorityQueueLB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorityQueueLB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorityQueueLB) ProtoMessage() {}

func (x *PriorityQueueLB) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorityQueueLB.ProtoReflect.Descriptor instead.
func (*PriorityQueueLB) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescGZIP(), []int{1}
}

func (m *PriorityQueueLB) GetConcurrencyControllerConfig() isPriorityQueueLB_ConcurrencyControllerConfig {
	if m != nil {
		return m.ConcurrencyControllerConfig
	}
	return nil
}

func (x *PriorityQueueLB) GetGradientControllerConfig() *PriorityQueueLBGradientControllerConfig {
	if x, ok := x.GetConcurrencyControllerConfig().(*PriorityQueueLB_GradientControllerConfig); ok {
		return x.GradientControllerConfig
	}
	return nil
}

func (x *PriorityQueueLB) GetEnabled() *v3.RuntimeFeatureFlag {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type isPriorityQueueLB_ConcurrencyControllerConfig interface {
	isPriorityQueueLB_ConcurrencyControllerConfig()
}

type PriorityQueueLB_GradientControllerConfig struct {
	// Gradient concurrency control will be used.
	GradientControllerConfig *PriorityQueueLBGradientControllerConfig `protobuf:"bytes,1,opt,name=gradient_controller_config,json=gradientControllerConfig,proto3,oneof"`
}

func (*PriorityQueueLB_GradientControllerConfig) isPriorityQueueLB_ConcurrencyControllerConfig() {}

var File_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c,
	0x62, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6c, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x62, 0x2e, 0x76, 0x33,
	0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76,
	0x33, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x07, 0x0a, 0x27, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x42, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x1e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x68, 0x69, 0x67,
	0x68, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x68, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x68, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12,
	0x43, 0x0a, 0x0e, 0x68, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x65, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x68, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x73, 0x74, 0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x20,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54,
	0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x52, 0x9a, 0xc5, 0x88, 0x1e, 0x4d, 0x0a, 0x4b, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x62, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xee, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x42, 0x12, 0xa5, 0x01, 0x0a,
	0x1a, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6c, 0x62, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x42, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x18, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x49, 0x9a, 0xc5, 0x88, 0x1e, 0x44, 0x0a,
	0x42, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x62, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4c, 0x42, 0x42, 0x24, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x42, 0xd1, 0x01, 0xba, 0x80, 0xc8, 0xd1,
	0x06, 0x02, 0x10, 0x02, 0x0a, 0x40, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6c, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x14, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x42, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6c, 0x62, 0x2f, 0x76, 0x33, 0x3b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x62, 0x76, 0x33, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescData = file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDesc
)

func file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescData)
	})
	return file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDescData
}

var file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_goTypes = []interface{}{
	(*PriorityQueueLBGradientControllerConfig)(nil), // 0: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig
	(*PriorityQueueLB)(nil),                         // 1: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLB
	(*wrapperspb.UInt32Value)(nil),                  // 2: google.protobuf.UInt32Value
	(*wrapperspb.DoubleValue)(nil),                  // 3: google.protobuf.DoubleValue
	(*v3.RuntimeFeatureFlag)(nil),                   // 4: envoy.config.core.v3.RuntimeFeatureFlag
}
var file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_depIdxs = []int32{
	2,  // 0: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.max_latency:type_name -> google.protobuf.UInt32Value
	3,  // 1: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.high_latency_trigger_threshold:type_name -> google.protobuf.DoubleValue
	3,  // 2: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.happiness_alpha:type_name -> google.protobuf.DoubleValue
	3,  // 3: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.happiness_beta:type_name -> google.protobuf.DoubleValue
	3,  // 4: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.step_down_percentage:type_name -> google.protobuf.DoubleValue
	2,  // 5: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.experiment_mode_duration:type_name -> google.protobuf.UInt32Value
	2,  // 6: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.experiment_mode_recheck_duration:type_name -> google.protobuf.UInt32Value
	2,  // 7: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.normal_mode_duration:type_name -> google.protobuf.UInt32Value
	2,  // 8: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.experiment_min_sample_size:type_name -> google.protobuf.UInt32Value
	2,  // 9: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig.experiment_max_duration:type_name -> google.protobuf.UInt32Value
	0,  // 10: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLB.gradient_controller_config:type_name -> envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLBGradientControllerConfig
	4,  // 11: envoy.extensions.filters.http.priority_queue_lb.v3.PriorityQueueLB.enabled:type_name -> envoy.config.core.v3.RuntimeFeatureFlag
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_init() }
func file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_init() {
	if File_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityQueueLBGradientControllerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorityQueueLB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PriorityQueueLB_GradientControllerConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto = out.File
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_rawDesc = nil
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_goTypes = nil
	file_envoy_extensions_filters_http_priority_queue_lb_v3_priority_queue_lb_proto_depIdxs = nil
}
